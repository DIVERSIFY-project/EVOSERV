/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package eu.diversify.ffbpg.gui;

import eu.diversify.ffbpg.Application;
import eu.diversify.ffbpg.BPGraph;
import eu.diversify.ffbpg.Platform;
import java.awt.Color;
import java.awt.Graphics;
import java.util.Hashtable;
import sun.java2d.loops.FillRect;

/**
 *
 * @author ffl
 */
public class BPMatrixGraph extends javax.swing.JPanel {

    BPGraph graph;
    
    
    /**
     * Creates new form BPMatrixGraph
     */
    public BPMatrixGraph() {
        initComponents();
    }
    
    public Hashtable<Integer, Color> colors = new Hashtable<Integer, Color>();
    
    public Color getColorForShade(Integer shade) {
        Color result = colors.get(shade);
        if (result == null) {
            result = Color.getHSBColor(0.65f, 0, 1 - (shade / 100.0f) );
            colors.put(shade, result);
        }
        return result;
    }
    
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        
        g.setColor(Color.WHITE);
        g.fillRect(0, 0, this.getWidth(), this.getHeight());
        
        g.setColor(Color.GRAY);
        
        if (graph == null) return;
        Hashtable<Platform, Integer> platform_index = new Hashtable<Platform, Integer>();
        for(int i=0; i<graph.getPlatforms().size(); i++) {
            platform_index.put(graph.getPlatforms().get(i), i);
        }
        
        int sq_width = this.getWidth() / graph.getPlatforms().size();
        int sq_height = this.getHeight()/ graph.getApplications().size();
                
        int dx = this.getWidth() % graph.getPlatforms().size() / 2;
        int dy = this.getHeight() % graph.getApplications().size() / 2;
        
        for(int i=0; i<graph.getApplications().size(); i++) {
            int y = i*sq_height;
            Application app = graph.getApplications().get(i);
            for (Platform p : app.getLinkedPlatforms()) {
                int x = platform_index.get(p) * sq_width;
                
                int shade = app.getRequiredServices().intersection(p.getProvidedServices()).size() * 100 /  app.getRequiredServices().size();
                
                g.setColor(getColorForShade(shade));
                
                g.fillRect(dx + x, dy + y, sq_width, sq_height);
            }
        }
        
                
    }

    public void setBPGraph(BPGraph g) {
        this.graph = g;
        this.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
